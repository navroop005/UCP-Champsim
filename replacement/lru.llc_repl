#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK* current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    return lcc_lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
}

uint32_t CACHE::lcc_lru_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK* current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;

    // fill invalid line first
    for (way = 0; way < NUM_WAY; way++) {
        if (block[set][way].valid == false) {
            DP(if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    uint32_t max = 0;

    // LRU victim
    if (way == NUM_WAY) {
        uint32_t usedWays[NUM_CPUS] = {0};
        for (way = 0; way < NUM_WAY; way++) {
            usedWays[block[set][way].cpu]++;
        }

        if (usedWays[cpu] >= llc_ucp->getways(cpu)) {
            for (way = 0; way < NUM_WAY; way++) {
                if (block[set][way].cpu == cpu && block[set][way].lru > max) {
                    max = block[set][way].lru;
                }
            }
        }
        else {
            uint32_t i;
            for (i = 0; i < NUM_CPUS; i++) {
                if (i != cpu) {
                    if (usedWays[i] > llc_ucp->getways(i)) {
                        for (way = 0; way < NUM_WAY; way++) {
                            if (block[set][way].cpu == i && block[set][way].lru > max) {
                                max = block[set][way].lru;
                            }
                        }
                    }
                }
            }
        }

        // Check
        for (way = 0; way < NUM_WAY; way++) {
            if (block[set][way].lru == max) {
                DP(if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
        }
    }

    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t packet_addr)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME = +"_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    llc_ucp->umon(cpu, set, packet_addr);

    // baseline LRU
    if (hit && (type == WRITEBACK))  // writeback hit does not update LRU state
        return;

    return lru_update(set, way);
}

// void CACHE::llc_lru_update(uint32_t set, uint32_t way, uint32_t way_s, uint32_t way_e)
// {
//     // update lru replacement state
//     for (uint32_t i=way_s; i<way_e; i++) {
//         if (block[set][i].lru < block[set][way].lru) {
//             block[set][i].lru++;
//         }
//     }
//     block[set][way].lru = 0; // promote to the MRU position
// }

void CACHE::llc_replacement_final_stats()
{
}
